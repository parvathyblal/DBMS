Enter user-name: SYSTEM 
Enter password: 
Last Successful login time: Wed Mar 06 2024 13:34:37 +05:30 

Connected to: 
Oracle Database 21c Express Edition Release 21.0.0.0.0 - Production 
Version 21.3.0.0.0 

SQL> create function sqarea1(len int)return int is 
  2      area int(5,3); 
  3      begin 
  4      area:=(len*len); 
  5      return area; 
  6      end; 
  7    / 

Function created. 

SQL> Function created 
SP2-0734: unknown command beginning "Function c..." - rest of line ignored. 
SQL>  begin 
  2    dbms_output.Put_line('area='||sqarea1(4)); 
  3    end; 
  4  / 

PL/SQL procedure successfully completed. 

SQL>     area int(5,3); 
SP2-0734: unknown command beginning "area int(5..." - rest of line ignored. 
SQL>     begin 
  2      area:=(len*len); 
  3      return area; 
  4      end; 
  5  / 
    area:=(len*len); 
    * 
ERROR at line 2: 
ORA-06550: line 2, column 5: 
PLS-00321: expression 'OGC_AREA' is inappropriate as the left hand side of an 
assignment statement 
ORA-06550: line 2, column 5: 
PL/SQL: Statement ignored 
ORA-06550: line 3, column 5: 
PLS-00372: In a procedure, RETURN statement cannot contain an expression 
ORA-06550: line 3, column 5: 
PL/SQL: Statement ignored 


SQL> create function sqarea1(len int)return int is 
  2      area int(5,3); 
  3      begin 
  4      area:=(len*len); 
  5      return area; 
  6      end; 
  7    / 
create function sqarea1(len int)return int is 
                * 
ERROR at line 1: 
ORA-00955: name is already used by an existing object 


SQL> Function created 
SP2-0734: unknown command beginning "Function c..." - rest of line ignored. 
SQL>  begin 
  2    dbms_output.Put_line('area='||sqarea1(4)); 
  3    end; 
  4  / 

PL/SQL procedure successfully completed. 

SQL> set serveroutput on; 
SQL> create function sqarea1(len int)return int is 
  2      area int(5,3); 
  3      begin 
  4      area:=(len*len); 
  5      return area; 
  6      end; 
  7    / 
create function sqarea1(len int)return int is 
                * 
ERROR at line 1: 
ORA-00955: name is already used by an existing object 


SQL> Function created 
SP2-0734: unknown command beginning "Function c..." - rest of line ignored. 
SQL>  begin 
  2    dbms_output.Put_line('area='||sqarea1(4)); 
  3    end; 
  4  / 
area=16 

PL/SQL procedure successfully completed. 

SQL> set serveroutput on; 
SQL> create or replace function adder(n1 in number, n2 in number) 
  2       return number 
  3        is 
  4        n3 number(8); 
  5        begin 
  6        n3 :=n1+n2; 
  7        return n3; 
  8        end; 
  9        / 

Function created. 

SQL> Function created. 
SP2-0734: unknown command beginning "Function c..." - rest of line ignored. 
SQL>  DECLARE 
  2         n3 number(2); 
  3      BEGIN 
  4         n3 := adder(11,22); 
  5         dbms_output.put_line('Addition is: ' || n3); 
  6      END; 
  7      / 
Addition is: 33 

PL/SQL procedure successfully completed. 

SQL>  set serveroutput on; 
SQL>  DECLARE 
  2        a number; 
  3        b number; 
  4        c number; 
  5     FUNCTION findMax(x IN number, y IN number) 
  6     RETURN number 
  7     IS 
  8         z number; 
  9     BEGIN 
 10        IF x > y THEN 
 11           z:= x; 
 12        ELSE 
 13           Z:= y; 
 14        END IF; 
 15         RETURN z; 
 16     END; 
 17     BEGIN 
 18        a:= 23; 
 19        b:= 45; 
 20         c := findMax(a, b); 
 21        dbms_output.put_line(' Maximum of (23,45): ' || c); 
 22     END; 
 23  / 
Maximum of (23,45): 45 

PL/SQL procedure successfully completed. 

SQL> create table customers(id int,name varchar(20),dpmt varchar(20),salary int); 

Table created. 

SQL> Table created. 
SP2-0734: unknown command beginning "Table crea..." - rest of line ignored. 
SQL> insert into customers values(1,'sam','cs',2000); 

1 row created. 

SQL> 1 row created. 
SQL>  insert into customers values(2,'tam','it',3000); 

1 row created. 

SQL> 1 row created. 
SQL> insert into customers values(3,'ram','ec',2500); 

1 row created. 

SQL> 1 row created. 
SQL>  insert into customers values(4,'kam','mca',5000); 

1 row created. 

SQL> 1 row created. 
SQL> select * from customers; 

        ID NAME                 DPMT                     SALARY 
---------- -------------------- -------------------- ---------- 
         1 sam                  cs                         2000 
         2 tam                  it                         3000 
         3 ram                  ec                         2500 
         4 kam                  mca                        5000 

SQL> CREATE OR REPLACE FUNCTION totalCustomers 
  2          RETURN number IS 
  3             total number(2) := 0; 
  4          BEGIN 
  5             SELECT count(*) into total 
  6             FROM customers; 
  7              RETURN total; 
  8         END; 
  9        / 

Function created. 

SQL> Function created. 
SP2-0734: unknown command beginning "Function c..." - rest of line ignored. 
SQL>   DECLARE 
  2            c number(2); 
  3          BEGIN 
  4             c := totalCustomers(); 
  5             dbms_output.put_line('Total no. of Customers: ' || c); 
  6          END; 
  7          / 
Total no. of Customers: 4 

PL/SQL procedure successfully completed. 

SQL> DECLARE 
  2       total_rows number(2); 
  3    BEGIN 
  4       UPDATE  customers 
  5       SET salary = salary + 5000; 
  6       IF sql%notfound THEN 
  7          dbms_output.put_line('no customers updated'); 
  8       ELSIF sql%found THEN 
  9          total_rows := sql%rowcount; 
 10          dbms_output.put_line( total_rows || ' customers updated '); 
 11       END IF; 
 12    END; 
 13     / 
4 customers updated 

PL/SQL procedure successfully completed. 

SQL> set serveroutput on; 
SQL> DECLARE 
  2       total_rows number(2); 
  3    BEGIN 
  4       UPDATE  customers 
  5       SET salary = salary + 5000; 
  6       IF sql%notfound THEN 
  7          dbms_output.put_line('no customers updated'); 
  8       ELSIF sql%found THEN 
  9          total_rows := sql%rowcount; 
 10          dbms_output.put_line( total_rows || ' customers updated '); 
 11       END IF; 
 12    END; 
 13     / 
4 customers updated 

PL/SQL procedure successfully completed. 

SQL> create table customers(id int,name varchar(20),dpmt varchar(20),salary int); 
create table customers(id int,name varchar(20),dpmt varchar(20),salary int) 
             * 
ERROR at line 1: 
ORA-00955: name is already used by an existing object 


SQL> Table created. 
SP2-0734: unknown command beginning "Table crea..." - rest of line ignored. 
SQL> insert into customers values(1,'sam','cs',2000); 

1 row created. 

SQL> 1 row created. 
SQL>  insert into customers values(2,'tam','it',3000); 

1 row created. 

SQL> 1 row created. 
SQL> insert into customers values(3,'ram','ec',2500); 

1 row created. 

SQL> 1 row created. 
SQL>  insert into customers values(4,'kam','mca',5000); 

1 row created. 

SQL> 1 row created. 
SQL> select * from customers; 

        ID NAME                 DPMT                     SALARY 
---------- -------------------- -------------------- ---------- 
         1 sam                  cs                        12000 
         2 tam                  it                        13000 
         3 ram                  ec                        12500 
         4 kam                  mca                       15000 
         1 sam                  cs                         2000 
         2 tam                  it                         3000 
         3 ram                  ec                         2500 
         4 kam                  mca                        5000 

8 rows selected. 

SQL> CREATE OR REPLACE FUNCTION totalCustomers 
  2          RETURN number IS 
  3             total number(2) := 0; 
  4          BEGIN 
  5             SELECT count(*) into total 
  6             FROM customers; 
  7              RETURN total; 
  8         END; 
  9        / 

Function created. 

SQL>   DECLARE 
  2            c number(2); 
  3          BEGIN 
  4             c := totalCustomers(); 
  5             dbms_output.put_line('Total no. of Customers: ' || c); 
  6          END; 
  7          / 
Total no. of Customers: 8 

PL/SQL procedure successfully completed. 

SQL> DECLARE 
  2       total_rows number(2); 
  3    BEGIN 
  4       UPDATE  customers 
  5       SET salary = salary + 5000; 
  6       IF sql%notfound THEN 
  7          dbms_output.put_line('no customers updated'); 
  8       ELSIF sql%found THEN 
  9          total_rows := sql%rowcount; 
 10          dbms_output.put_line( total_rows || ' customers updated '); 
 11       END IF; 
 12    END; 
 13     / 
8 customers updated 

PL/SQL procedure successfully completed. 

SQL> DECLARE 
  2        c_id customers.id%type; 
  3        c_name customers.name%type; 
  4        c_salary customers.salary%type; 
  5       CURSOR c_customers is 
  6           SELECT id, name, salary FROM customers; 
  7    BEGIN 
  8        OPEN c_customers; 
  9        LOOP 
 10          FETCH c_customers into c_id, c_name, c_salary; 
 11          EXIT WHEN c_customers%notfound; 
 12           dbms_output.put_line(c_id || ' ' || c_name || ' ' || c_salary); 
 13       END LOOP; 
 14    CLOSE c_customers; 
 15    END; 
 16    / 
1 sam 17000 
2 tam 18000 
3 ram 17500 
4 kam 20000 
1 sam 7000 
2 tam 8000 
3 ram 7500 
4 kam 10000 

PL/SQL procedure successfully completed. 

SQL> CREATE OR REPLACE TRIGGER salaryupdate 
  2    BEFORE DELETE OR INSERT OR UPDATE ON customers 
  3    FOR EACH ROW 
  4    WHEN (NEW.ID > 0) 
  5    DECLARE 
  6       sal_diff number; 
  7   BEGIN 
  8       sal_diff := :NEW.salary  - :OLD.salary; 
  9       dbms_output.put_line('Old salary: ' || :OLD.salary); 
 10       dbms_output.put_line('New salary: ' || :NEW.salary); 
 11       dbms_output.put_line('Salary difference: ' || sal_diff); 
 12   END; 
 13     / 

Trigger created. 

SQL> Trigger created. 
SP2-0734: unknown command beginning "Trigger cr..." - rest of line ignored. 
SQL>  DECLARE 
  2       total_rows number(2); 
  3    BEGIN 
  4         UPDATE  customers 
  5         SET salary = salary + 5000; 
  6         IF sql%notfound THEN 
  7            dbms_output.put_line('no customers updated'); 
  8         ELSIF sql%found THEN 
  9            total_rows := sql%rowcount; 
 10           dbms_output.put_line( total_rows || ' customers updated '); 
 11        END IF; 
 12     END; 
 13     / 
Old salary: 17000 
New salary: 22000 
Salary difference: 5000 
Old salary: 18000 
New salary: 23000 
Salary difference: 5000 
Old salary: 17500 
New salary: 22500 
Salary difference: 5000 
Old salary: 20000 
New salary: 25000 
Salary difference: 5000 
Old salary: 7000 
New salary: 12000 
Salary difference: 5000 
Old salary: 8000 
New salary: 13000 
Salary difference: 5000 
Old salary: 7500 
New salary: 12500 
Salary difference: 5000 
Old salary: 10000 
New salary: 15000 
Salary difference: 5000 
8 customers updated 

PL/SQL procedure successfully completed. 

SQL> CREATE OR REPLACE TRIGGER Checksalary 
  2     BEFORE 
  3     INSERT OR UPDATE ON employee 
  4    FOR EACH ROW 
  5     BEGIN 
  6     IF :new.salary>3000 THEN 
  7     raise_application_error(-20001, 'salary should not be greater than 2000'); 
  8     END IF; 
  9     END; 
 10      / 
   INSERT OR UPDATE ON employee 
                       * 
ERROR at line 3: 
ORA-00942: table or view does not exist 


SQL> CREATE OR REPLACE TRIGGER Checksalary 
  2     BEFORE 
  3     INSERT OR UPDATE ON employee 
  4    FOR EACH ROW 
  5     BEGIN 
  6     IF :new.salary>3000 THEN 
  7     raise_application_error(-20001, 'salary should not be greater than 2000'); 
  8     END IF; 
  9     END; 
 10      / 
   INSERT OR UPDATE ON employee 
                       * 
ERROR at line 3: 
ORA-00942: table or view does not exist 


SQL> CREATE OR REPLACE TRIGGER Checksalary 
  2     BEFORE 
  3     INSERT OR UPDATE ON employee 
  4    FOR EACH ROW 
  5     BEGIN 
  6     IF :new.salary>3000 THEN 
  7     raise_application_error(-20001, 'salary should not be greater than 2000'); 
  8     END IF; 
  9     END; 
 10  / 
   INSERT OR UPDATE ON employee 
                       * 
ERROR at line 3: 
ORA-00942: table or view does not exist 


SQL> CREATE OR REPLACE TRIGGER Checksalary 
  2     BEFORE 
  3     INSERT OR UPDATE ON employee 
  4    FOR EACH ROW 
  5     BEGIN 
  6     IF :new.salary>3000 THEN 
  7     raise_application_error(-20001, 'salary should not be greater than 2000'); 
  8     END IF; 
  9     END; 
 10  / 
   INSERT OR UPDATE ON employee 
                       * 
ERROR at line 3: 
ORA-00942: table or view does not exist 


SQL>  create table stud(sid int,sname varchar(20),sdpmt varchar(20),marks int); 

Table created. 

SQL> Table created. 
SP2-0734: unknown command beginning "Table crea..." - rest of line ignored. 
SQL>  insert into stud values(1,'sam','cse',20); 

1 row created. 

SQL> 1 row created. 
SQL>  insert into stud values(2,'tam','it',30); 

1 row created. 

SQL> 1 row created. 
SQL>  select * from stud; 

       SID SNAME                SDPMT                     MARKS 
---------- -------------------- -------------------- ---------- 
         1 sam                  cse                          20 
         2 tam                  it                           30 

SQL>  create or replace trigger studtrig after insert on stud 
  2      begin 
  3      dbms_output.put_line('inserted'); 
  4      end; 
  5      / 

Trigger created. 

SQL> Trigger created. 
SP2-0734: unknown command beginning "Trigger cr..." - rest of line ignored. 
SQL> insert into stud values(3,'wam','ec',39); 
inserted 

1 row created. 

SQL> inserted 
SP2-0042: unknown command "inserted" - rest of line ignored. 
SQL> 1 row created 
SQL>